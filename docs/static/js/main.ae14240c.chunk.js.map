{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","elem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,sBAAMC,SAVa,SAAEC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAlBoB,SAAEP,GAC1BF,EAAeE,EAAEQ,OAAOF,a,+BCRfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAUH,GAF3C,+DAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAgBdM,GAhBc,4CAAH,sDCAPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IACpC,OACE,sBAAKc,UAAU,OAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCCEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAExB,ECJ0B,SAAEA,GAE5B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAM,SAAAC,GACLH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGd,CAACpB,IAEGqB,EDb0BK,CAAc1B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAMpB,IAEJoB,GAAW,4CAEb,qBAAKJ,UAAU,YAAf,SAEMH,EAAOJ,KAAK,SAAEC,GAAF,OACV,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEfbgB,EAAe,WAG1B,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMA,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI2C,EAAWnB,KAAK,SAACoB,GAAD,OACd,cAAC,EAAD,CAEE7B,SAAW6B,GADLA,YCXLC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae14240c.chunk.js","sourcesContent":["import { useState } from \"react\"\nimport PropTypes from \"prop-types\"\n\nexport const AddCategory = ( { setCategories } ) => {\n\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = ( e ) => {\n    setInputValue( e.target.value );\n  }\n\n  const handleSubmit = ( e ) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2){\n      setCategories( cats => [ inputValue, ...cats]);\n      setInputValue('');\n    }\n  }\n\n  return(\n    <form onSubmit={handleSubmit}>\n      <input \n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","export const getGifs = async( category ) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${process.env.API_KEY}`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  \n  // console.log(gifs);\n  return gifs;\n}","export const GifGridItem = ( { title, url } ) => {\n  return (\n    <div className=\"card\">\n      <img src={ url } alt={ title }/>\n      <p>{ title }</p>\n    </div>\n  )\n}\n","// import { useState, useEffect } from \"react\";\n// import { getGifs } from \"../helpers/getGifs\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n\n  const { data: images, loading} = useFetchGifs( category );\n\n  return(\n    <>\n      <h3>{ category }</h3>\n\n      { loading && <p>Cargando...</p> }\n\n      <div className=\"card-grid\">\n          {\n            images.map( ( img ) => (        \n              <GifGridItem\n                key={ img.id }\n                { ...img }\n              />\n            ))\n          }\n      </div>\n    </>\n  )\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(category)\n      .then( imgs => {\n        setState({\n          data: imgs,\n          loading: false\n        })\n      });\n  }, [category])\n\n  return state\n}\n","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n\n  // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n  const [categories, setCategories] = useState(['One Punch']);\n\n  // const handlerAdd = (elem) => {\n  //   setCategories([...categories, 'HunterXHunter'])\n  // }\n\n  return(\n    <>\n      <h2>Gif Expert App</h2>\n      <AddCategory setCategories={ setCategories }/>\n      <hr />\n\n      <ol>\n        {\n          categories.map( (elem) => (\n            <GifGrid\n              key={ elem }\n              category={ elem }\n            />\n          ))\n        }\n      </ol>\n    </>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
